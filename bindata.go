// Code generated by go-bindata.
// sources:
// templates/aliastype.go.tmpl
// templates/create-type.sql.tmpl
// templates/sqltype.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAliastypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x8a\xdc\x30\x0c\x3e\xdb\x4f\x21\x02\x05\x7b\x19\x92\x9e\x17\x72\x68\xa1\xd7\x52\x68\xe9\xa5\xf4\xe0\x38\xca\xd4\x6c\xe2\x4c\x65\xcd\x36\x83\xf1\xbb\x17\xff\x4c\xcb\x16\xba\xb9\x44\x91\xbe\x7c\x3f\xd2\x30\xc0\x19\x3d\x92\x61\x9c\xc1\xee\x33\xca\x8b\xb1\x4f\xe6\x8c\x10\x63\xff\xa9\x96\x1f\xcd\x86\x29\x49\xe9\xb6\xcb\x4e\x0c\x4a\x8a\x6e\x36\x6c\x26\x13\x70\x08\x3f\xd7\x61\x26\xf7\x8c\xd4\x49\xd1\x05\x26\xbb\xfb\xe7\x5c\x2e\x1b\x77\x52\x4b\xb9\x5c\xbd\x05\x75\xc0\x43\x8c\xfd\xbb\xd5\x99\x50\xd9\x34\x7c\xb6\xc6\xab\x40\x16\x9c\x67\xa4\xc5\x58\x8c\x49\x03\x12\xed\x04\x51\x8a\xf0\xcb\xb1\xfd\x01\x19\xf0\x38\xe6\x57\xaf\xf8\x76\x41\x9d\x67\xd6\x04\x84\x6f\xdf\xa7\x1b\xe3\xa3\x14\x82\x90\xaf\xe4\xe1\xe8\x83\x35\xfe\xfd\x8d\x31\x64\x5e\xdd\x70\x81\xc9\xf9\xf3\x7f\x70\x95\xa4\xc0\xb5\x14\x31\xf6\xd9\x95\x47\x4a\x49\x8a\x24\xef\x7f\x2c\x1b\xf7\x1f\xb2\xb1\x45\x75\x79\xbe\x33\xe4\x98\x48\x0c\x6f\xbe\x00\xef\xf0\x32\x5b\x77\x82\xa2\x9f\x5e\x49\xff\xc2\x6a\xcb\xd2\xd2\x47\x09\xf9\x69\x66\x0a\x28\xa5\xda\x7b\x38\x60\xfc\x47\x4c\x39\x5d\x67\xcd\xab\x77\xeb\xab\xc2\x5f\xcd\x7a\x45\xa5\x41\xd5\xab\xf5\xe5\xfb\x54\x95\xf3\x72\x0b\x97\x5b\xe0\x80\x71\xcc\x64\xf7\x96\xf8\xcb\x7f\x2a\x22\xa5\xdb\x7c\x4d\xf9\x46\x9b\x79\xc2\xb6\xd0\xd3\x5b\xfd\x27\x44\x11\xa0\x7b\x82\xc6\x32\x55\x8e\xf4\x3b\x00\x00\xff\xff\x67\xa7\x62\x07\x7f\x02\x00\x00")

func templatesAliastypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAliastypeGoTmpl,
		"templates/aliastype.go.tmpl",
	)
}

func templatesAliastypeGoTmpl() (*asset, error) {
	bytes, err := templatesAliastypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/aliastype.go.tmpl", size: 639, mode: os.FileMode(420), modTime: time.Unix(1476956856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateTypeSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x0a\xc2\x50\x10\x44\x6b\x73\x8a\x29\x52\x28\x84\x1c\x40\xb1\xb5\x12\x41\xf4\x02\x1f\xff\x44\x3e\xe8\x12\x92\x14\x86\x65\xee\x2e\x0b\x1f\xd2\xed\x0e\x6f\xde\xbc\x26\xa6\x85\x58\xd6\x91\x70\xef\x1f\xf7\xeb\x73\x1d\x79\x4b\x5f\x4a\x48\x33\xf6\x70\xc7\x94\xec\x4d\xb4\xc5\x32\x7f\x1d\xda\xa1\xf0\x93\x71\x3c\xa3\xbf\xc4\x35\x4b\x0d\x80\x00\xcb\x50\x29\x48\x9d\x3b\x2d\x4b\x91\x87\x37\x9c\x90\x76\xf5\x8d\x99\xad\x48\xcb\x90\x9a\xc3\xe9\x1f\x00\x00\xff\xff\x47\x62\x8b\xd8\x90\x00\x00\x00")

func templatesCreateTypeSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTypeSqlTmpl,
		"templates/create-type.sql.tmpl",
	)
}

func templatesCreateTypeSqlTmpl() (*asset, error) {
	bytes, err := templatesCreateTypeSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-type.sql.tmpl", size: 144, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqltypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x22\x6c\x60\x29\x51\xa5\xa4\xbd\x25\x75\x81\x2d\xd0\x9e\x8a\xa0\xc5\x06\xbd\xb8\x39\x50\xd2\xc8\x21\x2c\x51\x0a\x49\x3b\x36\xb4\xfc\xef\xc5\x90\xb2\x2d\x7f\xa4\xc9\xb6\x87\xe6\xe0\x48\xe2\xcc\x70\xde\xd3\x7b\x23\x66\x19\xcc\x51\xa2\xe2\x06\x4b\x28\xda\x12\x59\xc7\x8b\x05\x9f\x23\xf4\x7d\xfa\xbb\xbf\x7c\xe0\x0d\x5a\xcb\x98\x68\xba\x56\x19\x88\x58\x10\x96\xdc\xf0\x9c\x6b\xcc\xf4\x4b\x1d\x1e\xdd\x67\xa5\x12\x2b\x54\xf4\x58\x1b\x55\xb4\x72\x45\x97\x55\x63\x42\xc6\x82\x70\x2e\xcc\xf3\x32\x4f\x8b\xb6\xc9\xda\xce\x88\xb6\xe3\x1b\x4a\x9a\xa3\xcc\x50\x16\x6d\x29\xe4\x3c\x64\x31\x63\x7d\x0f\xa2\x82\xf4\x4b\x2d\x0a\x04\x6b\x99\xd9\x74\xae\xa7\xc7\x4d\x37\x34\xe4\x97\x66\x4f\x07\x0f\x19\xcb\x32\xf8\x93\xd7\x4b\x04\xd1\x74\x35\x36\x28\x8d\x06\xf3\x8c\xe0\xbb\x4a\xdd\x9a\x02\x21\x0d\xaa\x8a\x17\x98\xb2\x6a\x29\x0b\x88\xd6\x67\x8a\xc7\xbe\x52\x14\x43\x34\xce\x4e\x00\x95\x6a\x55\x0c\x3d\x0b\x44\x05\x6b\x98\x4e\x41\x8a\x9a\x6e\x03\x85\x66\xa9\x24\xdd\x26\xf4\xc3\x02\xcb\x5c\x90\x84\xbb\x29\xd4\x28\xa3\x75\x7c\x0f\x12\x7e\x82\x1b\x17\x9e\x65\xf0\xf8\x8c\x0a\xe1\x55\xd4\x35\xe4\x08\xdc\x40\x8d\x5c\x1b\x30\xaf\x2d\x14\x4b\x55\x6f\x20\x57\xbc\x58\xa0\xd1\x09\x7c\x7f\xf5\x00\xf9\xc6\xa0\x86\xb6\x82\x97\x65\x6b\x50\x27\xbe\x08\x97\x25\x3c\x7c\x77\xbb\x5f\x2d\xb1\x16\x8d\x30\xa8\x74\xca\x82\x20\xa7\xdd\x1b\xbe\xc0\x68\xf6\x44\x21\x09\xdc\x26\x70\x7b\xfd\xc3\x95\x8c\x69\x75\x76\xf3\x04\x53\x98\xf4\x13\xc6\x82\x60\xc5\xeb\x1b\x87\x90\x72\xd6\xb3\x9b\xa7\x74\x20\x81\x05\x04\x84\x16\x2e\xf6\x78\x0f\x00\xa3\x52\x2c\x08\xac\x2f\x92\x40\xbb\xa0\x12\x54\x2f\x1d\xf6\x1d\x6a\x5c\xb4\x8b\xd3\xe4\xaa\x31\xe9\x2f\xc4\x6b\x15\x85\x4b\x89\xeb\x0e\x0b\xd2\xe4\x8a\x36\x0f\xe3\xa1\x6e\x0e\x53\xd8\xca\x24\xfd\xdc\x75\x28\xcb\xcf\x4a\xf1\xcd\x1f\x44\x46\xf9\x33\xa1\x8f\xf2\x84\x92\x28\xa3\x6a\x15\x08\xea\xe1\xf6\x1e\x04\xfc\x08\xf2\x1e\xc4\xf5\xb5\xdf\x7a\xc5\x6b\x31\x82\x29\xc6\x30\xcf\xe1\x3c\x03\xd4\x75\x74\x04\x55\x8c\xa1\x1e\x60\xfd\x36\xb0\xbe\x36\xc1\xe5\x0e\x25\xa1\x9a\x24\x93\x78\xfb\xf4\xe3\x24\x90\x00\xb7\x7b\x6b\xa3\x84\x9c\x47\xa3\x92\x76\x12\xc7\x23\xa5\x0e\x71\x61\x6f\x43\xff\xd4\x1b\xea\x4b\xc1\xe5\xb1\x9f\xf4\x4b\x9d\xd2\x73\x79\xde\x4d\x57\xe7\xec\x44\xf1\x91\x56\xc5\x3e\xa1\xb7\xb1\x77\x13\xf4\x0c\xe8\x8f\x38\xa3\x88\xbd\xa7\xc0\xff\xed\xe9\xa3\x56\x03\xfd\x2a\x4c\xf1\xec\x42\xef\xa6\xf4\x2f\x8d\x68\x44\x38\x53\x16\x5c\xd3\x60\xa0\xd7\x70\xb7\x07\xbf\x4e\x75\xc1\xa5\xa7\x47\xab\x22\x1e\xe2\x3c\x27\x6f\xc4\xf9\x22\x2e\x3c\x3e\x60\x68\xfc\x02\xbb\x97\x3b\x20\x22\x5a\x03\x34\xed\x50\x19\xb8\x7c\x04\xd3\x9e\x99\x28\x7f\xc9\x4b\x1d\x26\xd4\xae\xfb\x89\x89\xdf\x7f\x64\xec\xa0\xe5\x01\xd3\x9e\xb1\x00\x6b\x6c\xf4\x4e\xc6\x3b\x51\x10\xcf\xbf\x09\x89\x5c\x39\x61\x44\x6e\x3f\x9f\xdc\x4f\x92\x89\x4d\x20\x3c\xd8\x8c\x24\x77\xaa\xf9\x01\xaa\x13\xbb\x75\x01\x34\xc0\xdc\x96\x31\xbd\x1f\x3f\xc2\xae\xd6\x30\x85\xe8\x6a\x1d\xcf\xee\x6e\x9e\x58\x60\x01\x6b\x8d\x6e\x65\x3f\x75\x4e\x91\x25\xa3\x5a\x3b\xab\x26\xb0\xa2\x14\xc5\xe5\x1c\xc1\xad\x79\xeb\xb4\xe6\x19\x1d\xc0\x83\x3a\xbd\xb3\xc8\x00\xdd\x85\x38\xdc\xd1\xea\x3d\x0b\x8f\xdd\x2b\x2a\xc8\x67\x82\xc6\x9f\xab\x70\x0f\xab\xf1\x34\x0f\xde\x7a\xdd\x1d\x57\x5a\xc8\x39\x70\xa2\xd7\xb5\x8a\xd2\x80\x90\x25\xae\xe1\xb2\x3c\x91\x03\xd5\x33\xed\x20\xb5\x30\x01\xb1\xb3\xb8\xdd\x32\x98\x3b\x8e\x47\x22\xb7\xf4\x09\x44\x59\xda\x37\x25\xf2\x1f\xfc\xb4\xdf\x07\xfe\x47\x37\x9d\x63\xf7\x7d\x23\x7d\xdc\x43\xff\xda\x3e\x5d\x2d\xcc\x18\xda\x37\x7a\xe3\xc2\x29\xf5\x57\x81\x75\xa9\xbf\xd6\x28\xad\x1d\xe7\x8c\xd1\xee\x26\xff\x65\xb9\x55\x91\x86\x79\x6b\xe0\xb2\x0c\x93\xe3\x22\x47\x9e\xb1\x2c\xe8\xfb\xc1\x2c\x9f\x9c\xf4\x12\xf8\x54\x51\x3c\x81\x19\x32\xad\x8f\xf2\xeb\xf0\x75\x08\xd8\x0d\xee\x61\x19\x65\xe9\x2e\x0f\xe4\xf7\x26\xa9\xef\x1d\x8a\x86\x81\x0d\x47\x67\xa3\x03\xd9\xed\xbe\x39\xe7\xce\x26\x31\xdb\x9d\x49\xa2\xc9\x47\x50\x0e\x38\x44\x35\x84\x58\x7b\xfa\xe5\xec\x7b\x6f\xa6\xa0\xef\x8f\xd9\xf0\x67\xc2\x23\x2e\x8e\x2a\xc4\xf4\xed\x1d\xfa\xcf\xb7\xdf\xc6\xbf\x03\x00\x00\xff\xff\xb5\x87\x29\x3f\x3e\x0b\x00\x00")

func templatesSqltypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqltypeGoTmpl,
		"templates/sqltype.go.tmpl",
	)
}

func templatesSqltypeGoTmpl() (*asset, error) {
	bytes, err := templatesSqltypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqltype.go.tmpl", size: 2878, mode: os.FileMode(420), modTime: time.Unix(1477033584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/aliastype.go.tmpl": templatesAliastypeGoTmpl,
	"templates/create-type.sql.tmpl": templatesCreateTypeSqlTmpl,
	"templates/sqltype.go.tmpl": templatesSqltypeGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"aliastype.go.tmpl": &bintree{templatesAliastypeGoTmpl, map[string]*bintree{}},
		"create-type.sql.tmpl": &bintree{templatesCreateTypeSqlTmpl, map[string]*bintree{}},
		"sqltype.go.tmpl": &bintree{templatesSqltypeGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

