// Code generated by go-bindata.
// sources:
// templates/aliastype.go.tmpl
// templates/create-type.sql.tmpl
// templates/sqltype.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAliastypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x8a\xdc\x30\x0c\x3e\xdb\x4f\x21\x02\x05\x7b\x19\x32\x3d\x2f\xcc\xa1\x2d\xbd\x96\x42\x4b\x2f\xa5\x07\xc7\xa3\xa4\x66\x13\x67\x56\xd6\x6c\x13\x8c\xdf\xbd\xf8\x67\x5a\xb6\xd0\xc9\x25\x8a\xf4\xe5\xfb\x91\x8e\x47\xf8\xb0\x9e\x11\x26\xf4\x48\x86\xf1\x0c\xc3\x0e\xe1\x79\x9e\xd0\xcb\x8b\xb1\x4f\x66\x42\x88\xb1\xff\x5c\xcb\x4f\x66\xc1\x94\xa4\x74\xcb\x65\x25\x06\x25\x45\x77\x36\x6c\x06\x13\xf0\x18\x9e\xe7\xe3\x99\xdc\x0b\x52\x27\x45\x17\x98\xec\xea\x5f\x72\x39\x2e\xdc\x49\x2d\xe5\x78\xf5\x16\xd4\x06\x0f\x31\xf6\xef\x66\x67\x42\x65\xd3\xf0\xc5\x1a\xaf\x02\x59\x70\x9e\x91\x46\x63\x31\x26\x0d\x48\xb4\x12\x44\x29\xc2\x2f\xc7\xf6\x27\x64\xc0\xe3\x29\xbf\x7a\xc5\xfb\x05\x75\x9e\x59\x13\x10\xbe\xff\x18\x76\xc6\x47\x29\x04\x21\x5f\xc9\xc3\xd6\x07\x6b\xfc\xfb\x9d\x31\x64\x5e\xdd\x70\x81\xc9\xf9\xe9\x3f\xb8\x4a\x52\xe0\x5a\x8a\x18\xfb\xec\xca\x23\xa5\x24\x45\x92\xb7\x3f\xc6\x85\xfb\x8f\xd9\xd8\xa8\xba\x3c\x5f\x19\x72\x4c\x24\x86\x37\x5f\x81\x57\x78\x9d\xad\x3b\x40\xd1\x4f\x77\xd2\xbf\xb2\xda\xb2\xb4\xf4\x51\x42\x7e\x9a\x99\x02\x4a\xa9\xf6\x1e\x36\x38\xfd\x23\xa6\x9c\xae\xb3\xe6\xd5\xbb\xf9\xae\xf0\x37\x33\x5f\x51\x69\x50\xf5\x6a\x7d\xf9\x3e\x54\xe5\xbc\xdc\xc2\xe5\x46\xd8\xe0\x74\xca\x64\xb7\x96\xf8\xcb\x7f\x28\x22\xa5\xdb\x7c\x0d\xf9\x46\x8b\x79\xc2\xb6\xd0\xc3\x5b\xfd\x27\x44\x11\xa0\x5b\x82\xc6\x32\x54\x8e\xf4\x3b\x00\x00\xff\xff\x9c\x48\x55\x15\x89\x02\x00\x00")

func templatesAliastypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAliastypeGoTmpl,
		"templates/aliastype.go.tmpl",
	)
}

func templatesAliastypeGoTmpl() (*asset, error) {
	bytes, err := templatesAliastypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/aliastype.go.tmpl", size: 649, mode: os.FileMode(420), modTime: time.Unix(1477050915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateTypeSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x0a\xc2\x50\x10\x44\x6b\x73\x8a\x29\x52\x28\x84\x1c\x40\xb1\xb5\x12\x41\xf4\x02\x1f\xff\x44\x3e\xe8\x12\x92\x14\x86\x65\xee\x2e\x0b\x1f\xd2\xed\x0e\x6f\xde\xbc\x26\xa6\x85\x58\xd6\x91\x70\xef\x1f\xf7\xeb\x73\x1d\x79\x4b\x5f\x4a\x48\x33\xf6\x70\xc7\x94\xec\x4d\xb4\xc5\x32\x7f\x1d\xda\xa1\xf0\x93\x71\x3c\xa3\xbf\xc4\x35\x4b\x0d\x80\x00\xcb\x50\x29\x48\x9d\x3b\x2d\x4b\x91\x87\x37\x9c\x90\x76\xf5\x8d\x99\xad\x48\xcb\x90\x9a\xc3\xe9\x1f\x00\x00\xff\xff\x47\x62\x8b\xd8\x90\x00\x00\x00")

func templatesCreateTypeSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTypeSqlTmpl,
		"templates/create-type.sql.tmpl",
	)
}

func templatesCreateTypeSqlTmpl() (*asset, error) {
	bytes, err := templatesCreateTypeSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-type.sql.tmpl", size: 144, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqltypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4f\x6f\xe3\xb6\x13\x3d\x8b\x9f\x62\x22\x6c\x60\x29\xd1\x4f\x4a\x7e\xbd\x25\x75\x81\x6d\xd1\x9e\x8a\xa0\xc5\x06\xbd\xb8\x39\x50\xd2\xc8\x21\x42\x53\x0a\x49\x3b\x36\xb4\xfc\xee\xc5\x90\xb2\x2d\x3b\x4e\x93\x6d\x0f\xcd\xc1\x91\xc8\xf9\xf7\x9e\xe6\x0d\x59\x14\xf0\x53\x5b\x23\xcc\x51\xa1\xe6\x16\x6b\x28\x37\x60\x9e\xe5\x1c\x15\xeb\x78\xf5\xc4\xe7\x08\x7d\x9f\xff\x16\x1e\xef\xf8\x02\x9d\x63\x4c\x2c\xba\x56\x5b\x48\x58\x14\xd7\xdc\xf2\x92\x1b\x2c\xcc\xb3\x8c\x8f\xde\x8b\x5a\x8b\x15\x6a\x5a\x36\x56\x57\xad\x5a\xd1\x63\xb3\xb0\x31\x63\x51\x3c\x17\xf6\x71\x59\xe6\x55\xbb\x28\xda\xce\x8a\xb6\xe3\x9b\x22\x64\x2e\x50\x55\x6d\x2d\xd4\x3c\x66\x29\x63\x7d\x0f\xa2\x81\xfc\x8b\x14\x15\x82\x73\xcc\x6e\x3a\x5f\xd3\xfd\xa6\x1b\x0a\x0a\x5b\xb3\x87\x83\x45\xc6\x8a\x02\xfe\xe0\x72\x89\x20\x16\x9d\xc4\x05\x2a\x6b\xc0\x3e\x22\x84\xaa\x72\xbf\xa7\x41\x28\x8b\xba\xe1\x15\xe6\xac\x59\xaa\x0a\x92\xf5\x89\xe0\x69\x88\x94\xa4\x90\x8c\xbd\x33\x40\xad\x5b\x9d\x42\xcf\x22\xd1\xc0\x1a\xa6\x53\x50\x42\xd2\x6b\xa4\xd1\x2e\xb5\xa2\xd7\x8c\x7e\x58\xe4\x98\x37\x52\x70\x33\x05\x89\x2a\x59\xa7\xb7\xa0\xe0\x07\xb8\xf2\xe6\x45\x01\xf7\x8f\xa8\x11\x5e\x84\x94\x50\x22\x70\x0b\x12\xb9\xb1\x60\x5f\x5a\xa8\x96\x5a\x6e\xa0\xd4\xbc\x7a\x42\x6b\x32\xf8\xff\xc5\x1d\x94\x1b\x8b\x06\xda\x06\x9e\x97\xad\x45\x93\x85\x20\x5c\xd5\x70\xf7\xbf\xeb\xfd\x6e\x8d\x52\x2c\x84\x45\x6d\x72\x16\x45\x25\x65\x5f\xf0\x27\x4c\x66\x0f\x64\x92\xc1\x75\x06\xd7\x97\xdf\x5d\xa8\x94\x76\x67\x57\x0f\x30\x85\x49\x3f\x61\x2c\x8a\x56\x5c\x5e\x79\x84\xe4\xb3\x9e\x5d\x3d\xe4\x03\x09\x2c\x22\x20\xb4\x71\xb6\xc7\x7b\x00\x18\xb5\x66\x51\xe4\x42\x90\x0c\xda\x27\x0a\x41\xf1\xf2\x21\xef\x10\xe3\xac\x7d\x7a\xed\xdc\x2c\x6c\xfe\x33\xf1\xda\x24\xf1\x52\xe1\xba\xc3\x8a\x1a\x73\x45\xc9\xe3\x74\x88\x5b\xc2\x14\xb6\x6d\x92\x7f\xee\x3a\x54\xf5\x67\xad\xf9\xe6\x77\x22\xa3\xfe\x91\xd0\x27\x65\x46\x4e\xe4\xd1\xb4\x1a\x04\xd5\x70\x7d\x0b\x02\xbe\x07\x75\x0b\xe2\xf2\x32\xa4\x5e\x71\x29\x46\x30\xc5\x18\xe6\x29\x9c\x27\x80\xfa\x8a\x8e\xa0\x8a\x31\xd4\x03\xac\xdf\x06\x36\xc4\x26\xb8\xdc\xa3\x24\x54\x93\x6c\x92\x6e\x57\x3f\x4e\x02\x35\xe0\x36\xb7\xb1\x5a\xa8\x79\x32\x0a\xe9\x26\x69\x3a\xea\xd4\xc1\x2e\xee\x5d\x1c\x56\x83\xa0\xbe\x54\x5c\x1d\xeb\xc9\x3c\xcb\x9c\xd6\xd5\x69\x35\x5d\x9c\x92\x13\xd9\x27\x46\x57\x7b\x87\xde\xa5\x41\x4d\xd0\x33\xa0\x3f\xe2\x8c\x2c\xf6\x9a\x82\xf0\xb7\xa7\x8f\x4a\x8d\xcc\x8b\xb0\xd5\xa3\x37\xbd\x99\xd2\xbf\x3c\xa1\x11\xe1\x45\x59\x71\x43\x83\x81\x3e\xc3\xcd\x1e\xfc\x3a\x37\x15\x57\x81\x1e\xa3\xab\x74\xb0\x0b\x9c\xbc\x61\x17\x82\x78\xf3\xf4\x80\xa1\xf1\x07\xec\x9e\x6f\x80\x88\x68\x2d\xd0\xb4\x43\x6d\xe1\xfc\x1e\x6c\x7b\x62\xa2\xfc\xa9\xce\x4d\x9c\x51\xb9\xfe\x27\x25\x7e\xff\x96\xb1\x83\x92\x07\x4c\x7b\xc6\x22\x94\xb8\x30\xbb\x36\xde\x35\x05\xf1\xfc\xab\x50\xc8\xb5\x6f\x8c\xc4\xe7\x0b\xce\xfd\x24\x9b\xb8\x0c\xe2\x83\x64\xd4\x72\xaf\x7b\x7e\x80\xea\x9b\xdd\x79\x03\x1a\x60\x3e\x65\x4a\xdf\x27\x8c\xb0\x8b\x35\x4c\x21\xb9\x58\xa7\xb3\x9b\xab\x07\x16\x39\x40\x69\xd0\xef\xec\xa7\xce\x6b\x64\xd9\x28\xd6\x4e\xaa\x19\xac\xc8\x45\x73\x35\x47\xf0\x7b\x41\x3a\xad\x7d\x44\x0f\xf0\x20\x4e\xef\x25\x32\x40\xf7\x26\x1e\x77\xb2\x7a\x4f\xc2\x63\xf5\x8a\x06\xca\x99\xa0\xf1\xe7\x23\xdc\xc2\x6a\x3c\xcd\xa3\xb7\x3e\x77\xc7\xb5\x11\x6a\x0e\x9c\xe8\xf5\xa5\xa2\xb2\x20\x54\x8d\x6b\x38\xaf\x5f\xb5\x03\xc5\xb3\xed\xd0\x6a\x71\x06\x62\x27\x71\xb7\x65\xb0\xf4\x1c\x8f\x9a\xdc\xd1\x11\x88\xaa\x76\x6f\xb6\xc8\xbf\xd0\xd3\x3e\x0f\xfc\x87\x6a\x3a\xc5\xee\xfb\x42\xfa\xb8\x86\xfe\xb1\x7c\x3a\x29\xec\x18\xda\x37\x6a\xe3\xcc\x77\xea\x2f\x02\x65\x6d\xbe\x4a\x54\xce\x8d\x7d\xc6\x68\x77\x93\xff\xbc\xde\x76\x91\x81\x79\x6b\xe1\xbc\x8e\xb3\xe3\x20\x47\x9a\x71\x2c\xea\xfb\x41\x2c\x9f\x7c\xeb\x65\xf0\xa9\x21\x7b\x02\x33\x78\xba\x60\x15\xf6\xe1\xeb\x60\xb0\x1b\xdc\xc3\x36\xaa\xda\x3f\x1e\xb4\xdf\x9b\xa4\xbe\x77\x29\x1a\x06\x36\x1c\xdd\x8d\x0e\xda\x6e\x77\xe6\x9c\xba\x9b\xa4\x6c\x77\x27\x49\x26\x1f\x41\x39\xe0\x10\xcd\x60\xe2\xdc\xeb\x93\xb3\xef\x83\x98\xa2\xbe\x3f\x66\x23\xdc\x09\x8f\xb8\x38\x8a\x90\xd2\xd9\x3b\xd4\x5f\x6e\xcf\xc6\xbf\x02\x00\x00\xff\xff\xb7\xf6\x4b\x7f\x48\x0b\x00\x00")

func templatesSqltypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqltypeGoTmpl,
		"templates/sqltype.go.tmpl",
	)
}

func templatesSqltypeGoTmpl() (*asset, error) {
	bytes, err := templatesSqltypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqltype.go.tmpl", size: 2888, mode: os.FileMode(420), modTime: time.Unix(1477050928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/aliastype.go.tmpl": templatesAliastypeGoTmpl,
	"templates/create-type.sql.tmpl": templatesCreateTypeSqlTmpl,
	"templates/sqltype.go.tmpl": templatesSqltypeGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"aliastype.go.tmpl": &bintree{templatesAliastypeGoTmpl, map[string]*bintree{}},
		"create-type.sql.tmpl": &bintree{templatesCreateTypeSqlTmpl, map[string]*bintree{}},
		"sqltype.go.tmpl": &bintree{templatesSqltypeGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

