// Code generated by go-bindata.
// sources:
// templates/aliastype.go.tmpl
// templates/create-type.sql.tmpl
// templates/sqltype.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAliastypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x8a\xdc\x30\x0c\x3e\xdb\x4f\x21\x02\x05\x7b\x19\x92\x9e\x17\x72\x68\xa1\xd7\x52\x68\xe9\xa5\xf4\xe0\x38\xca\xd4\x6c\xe2\x4c\x65\xcd\x36\x83\xf1\xbb\x17\xff\x4c\xcb\x16\xba\xb9\x44\x91\xbe\x7c\x3f\xd2\x30\xc0\x19\x3d\x92\x61\x9c\xc1\xee\x33\xca\x8b\xb1\x4f\xe6\x8c\x10\x63\xff\xa9\x96\x1f\xcd\x86\x29\x49\xe9\xb6\xcb\x4e\x0c\x4a\x8a\x6e\x36\x6c\x26\x13\x70\x08\x3f\xd7\x61\x26\xf7\x8c\xd4\x49\xd1\x05\x26\xbb\xfb\xe7\x5c\x2e\x1b\x77\x52\x4b\xb9\x5c\xbd\x05\x75\xc0\x43\x8c\xfd\xbb\xd5\x99\x50\xd9\x34\x7c\xb6\xc6\xab\x40\x16\x9c\x67\xa4\xc5\x58\x8c\x49\x03\x12\xed\x04\x51\x8a\xf0\xcb\xb1\xfd\x01\x19\xf0\x38\xe6\x57\xaf\xf8\x76\x41\x9d\x67\xd6\x04\x84\x6f\xdf\xa7\x1b\xe3\xa3\x14\x82\x90\xaf\xe4\xe1\xe8\x83\x35\xfe\xfd\x8d\x31\x64\x5e\xdd\x70\x81\xc9\xf9\xf3\x7f\x70\x95\xa4\xc0\xb5\x14\x31\xf6\xd9\x95\x47\x4a\x49\x8a\x24\xef\x7f\x2c\x1b\xf7\x1f\xb2\xb1\x45\x75\x79\xbe\x33\xe4\x98\x48\x0c\x6f\xbe\x00\xef\xf0\x32\x5b\x77\x82\xa2\x9f\x5e\x49\xff\xc2\x6a\xcb\xd2\xd2\x47\x09\xf9\x69\x66\x0a\x28\xa5\xda\x7b\x38\x60\xfc\x47\x4c\x39\x5d\x67\xcd\xab\x77\xeb\xab\xc2\x5f\xcd\x7a\x45\xa5\x41\xd5\xab\xf5\xe5\xfb\x54\x95\xf3\x72\x0b\x97\x5b\xe0\x80\x71\xcc\x64\xf7\x96\xf8\xcb\x7f\x2a\x22\xa5\xdb\x7c\x4d\xf9\x46\x9b\x79\xc2\xb6\xd0\xd3\x5b\xfd\x27\x44\x11\xa0\x7b\x82\xc6\x32\x55\x8e\xf4\x3b\x00\x00\xff\xff\x67\xa7\x62\x07\x7f\x02\x00\x00")

func templatesAliastypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAliastypeGoTmpl,
		"templates/aliastype.go.tmpl",
	)
}

func templatesAliastypeGoTmpl() (*asset, error) {
	bytes, err := templatesAliastypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/aliastype.go.tmpl", size: 639, mode: os.FileMode(420), modTime: time.Unix(1476956856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateTypeSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x0a\xc2\x50\x10\x44\x6b\x73\x8a\x29\x52\x28\x84\x1c\x40\xb1\xb5\x12\x41\xf4\x02\x1f\xff\x44\x3e\xe8\x12\x92\x14\x86\x65\xee\x2e\x0b\x1f\xd2\xed\x0e\x6f\xde\xbc\x26\xa6\x85\x58\xd6\x91\x70\xef\x1f\xf7\xeb\x73\x1d\x79\x4b\x5f\x4a\x48\x33\xf6\x70\xc7\x94\xec\x4d\xb4\xc5\x32\x7f\x1d\xda\xa1\xf0\x93\x71\x3c\xa3\xbf\xc4\x35\x4b\x0d\x80\x00\xcb\x50\x29\x48\x9d\x3b\x2d\x4b\x91\x87\x37\x9c\x90\x76\xf5\x8d\x99\xad\x48\xcb\x90\x9a\xc3\xe9\x1f\x00\x00\xff\xff\x47\x62\x8b\xd8\x90\x00\x00\x00")

func templatesCreateTypeSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTypeSqlTmpl,
		"templates/create-type.sql.tmpl",
	)
}

func templatesCreateTypeSqlTmpl() (*asset, error) {
	bytes, err := templatesCreateTypeSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-type.sql.tmpl", size: 144, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqltypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x22\x6c\x60\x29\x51\xa5\xa4\xbd\x25\x75\x81\x2d\xd0\x9e\x8a\xa0\x45\x83\x5e\xdc\x1c\x28\x69\xe4\x10\x96\x28\x85\xa4\x1d\x1b\x5a\xfe\xf7\x62\x48\xd9\x96\x3f\xd2\x64\xdb\xc3\xfa\x20\x4b\xe4\xcc\x70\xde\xe3\xbc\x21\xb3\x0c\xe6\x28\x51\x71\x83\x25\x14\x6d\x89\xac\xe3\xc5\x82\xcf\x11\xfa\x3e\xfd\xdd\xbf\x3e\xf0\x06\xad\x65\x4c\x34\x5d\xab\x0c\x44\x2c\x08\x4b\x6e\x78\xce\x35\x66\xfa\xa5\x0e\x8f\xbe\xb3\x52\x89\x15\x2a\x1a\xd6\x46\x15\xad\x5c\xd1\x6b\xd5\x98\x90\xb1\x20\x9c\x0b\xf3\xbc\xcc\xd3\xa2\x6d\xb2\xb6\x33\xa2\xed\xf8\x86\x9c\xe6\x28\x33\x94\x45\x5b\x0a\x39\x0f\x59\xcc\x58\xdf\x83\xa8\x20\xfd\xac\x14\xdf\x80\xb5\xcc\x6c\x3a\x97\xd3\xe3\xa6\x1b\x12\xf2\x53\xb3\xa7\x83\x41\xc6\xb2\x0c\xfe\xe2\xf5\x12\x41\x34\x5d\x8d\x0d\x4a\xa3\xc1\x3c\x23\xf8\xac\x52\x37\xa7\x40\x48\x83\xaa\xe2\x05\xa6\xac\x5a\xca\x02\xa2\xf5\x99\xe0\xb1\x8f\x14\xc5\x10\x8d\xbd\x13\x40\xa5\x5a\x15\x43\xcf\x02\x51\xc1\x1a\xa6\x53\x90\xa2\xa6\xcf\x40\xa1\x59\x2a\x49\x9f\x09\x3d\x58\x60\x99\x33\x92\x70\x37\x85\x1a\x65\xb4\x8e\xef\x41\xc2\x4f\x70\xe3\xcc\xb3\x0c\x1e\x9f\x51\x21\xbc\x8a\xba\x86\x1c\x81\x1b\xa8\x91\x6b\x03\xe6\xb5\x85\x62\xa9\xea\x0d\xe4\x8a\x17\x0b\x34\x3a\x81\xef\xaf\x1e\x20\xdf\x18\xd4\xd0\x56\xf0\xb2\x6c\x0d\xea\xc4\x07\xe1\xb2\x84\x87\xef\x6e\xf7\xb3\x25\xd6\xa2\x11\x06\x95\x4e\x59\x10\xe4\xb4\x7a\xc3\x17\x18\xcd\x9e\xc8\x24\x81\xdb\x04\x6e\xaf\x7f\xb8\x92\x31\xcd\xce\x6e\x9e\x60\x0a\x93\x7e\xc2\x58\x10\xac\x78\x7d\xe3\x10\x92\xcf\x7a\x76\xf3\x94\x0e\x24\xb0\x80\x80\xd0\xc4\xc5\x1e\xef\x01\x60\x54\x8a\x05\x81\xf5\x41\x12\x68\x17\x14\x82\xe2\xa5\xc3\xba\x43\x8c\x8b\x76\x71\xea\x5c\x35\x26\xfd\x85\x78\xad\xa2\x70\x29\x71\xdd\x61\x41\x35\xb9\xa2\xc5\xc3\x78\x88\x9b\xc3\x14\xb6\x65\x92\x7e\xee\x3a\x94\xa5\xdb\xa9\x3f\x88\x8c\xf2\x67\x42\x1f\xe5\x09\x39\x91\x47\xd5\x2a\x10\x94\xc3\xed\x3d\x08\xf8\x11\xe4\x3d\x88\xeb\x6b\xbf\xf4\x8a\xd7\x62\x04\x53\x8c\x61\x9e\xc3\x79\x06\xa8\xcb\xe8\x08\xaa\x18\x43\x3d\xc0\xfa\x75\x60\x7d\x6c\x82\xcb\x1d\x4a\x42\x35\x49\x26\xf1\x76\xf4\xe3\x24\x50\x01\x6e\xd7\xd6\x46\x09\x39\x8f\x46\x21\xed\x24\x8e\x47\x95\x3a\xd8\x85\xbd\x0d\xfd\xa8\x17\xd4\x9f\x05\x97\xc7\x7a\xd2\x2f\x75\x4a\xe3\xf2\xbc\x9a\xae\xce\xc9\x89\xec\x23\xad\x8a\xbd\x43\x6f\x63\xaf\x26\xe8\x19\xd0\x8f\x38\x23\x8b\xbd\xa6\xc0\xff\xf6\xf4\x51\xaa\x81\x7e\x15\xa6\x78\x76\xa6\x77\x53\xfa\x4b\x23\x6a\x11\x4e\x94\x05\xd7\x08\x7e\x1b\xee\xf6\xe0\xd7\xa9\x2e\xb8\xf4\xf4\x68\x55\xc4\x83\x9d\xe7\xe4\x0d\x3b\x1f\xc4\x99\xc7\x07\x0c\x8d\x37\xb0\x7b\xb9\x03\x22\xa2\x35\x40\xdd\x0e\x95\x81\xcb\x47\x30\xed\x99\x8e\xf2\xb7\xbc\xd4\x61\x42\xe9\xba\x47\x4c\xfc\xfe\x2b\x63\x07\x29\x0f\x98\xf6\x8c\x05\x58\x63\xa3\x77\x65\xbc\x2b\x0a\xe2\xf9\x37\x21\x91\x2b\x17\x26\x72\xeb\x79\xe7\x7e\x92\x4c\x6c\x02\xe1\xc1\x62\x54\x72\xa7\x35\x3f\x40\x75\xc5\x6e\x9d\x01\x35\x30\xb7\x64\x4c\xfb\xe3\x5b\xd8\xd5\x1a\xa6\x10\x5d\xad\xe3\xd9\xdd\xcd\x13\x0b\x2c\x60\xad\xd1\xcd\xec\xbb\xce\x29\xb2\x64\x14\x6b\x27\xd5\x04\x56\xe4\xa2\xb8\x9c\x23\xb8\x39\x2f\x9d\xd6\x3c\xa3\x03\x78\x10\xa7\x77\x12\x19\xa0\x3b\x13\x87\x3b\x5a\xbd\x27\xe1\xb1\x7a\x45\x05\xf9\x4c\x50\xfb\x73\x11\xee\x61\x35\xee\xe6\xc1\x5b\xdb\xdd\x71\xa5\x85\x9c\x03\x77\x67\x10\x7a\x5d\x80\x90\x25\xae\xe1\xb2\x3c\x29\x07\x8a\x67\xda\xa1\xd4\xc2\x04\xc4\x4e\xe2\x76\xcb\x60\xee\x38\x1e\x15\xb9\xa5\x23\x10\x65\x69\xdf\x2c\x91\xff\xa1\xa7\xfd\x3a\xf0\x0d\xd5\x74\x8e\xdd\xf7\x85\xf4\x71\x0d\xfd\x67\xf9\x74\xb5\x30\x63\x68\x5f\xa9\x8d\x0b\x57\xa9\xbf\x0a\xac\x4b\xfd\xa5\x46\x69\xed\xd8\x67\x8c\x76\xd7\xf9\x2f\xcb\x6d\x15\x69\x98\xb7\x06\x2e\xcb\x30\x39\x0e\x72\xa4\x19\xcb\x82\xbe\x1f\xc4\xf2\xc9\x95\x5e\x02\x9f\x2a\xb2\x27\x30\x83\xa7\xf5\x56\x7e\x1e\xbe\x0c\x06\xbb\xc6\x3d\x4c\xa3\x2c\xdd\xeb\x41\xf9\xbd\x49\xea\x7b\x97\xa2\xa1\x61\xc3\xd1\xdd\xe8\xa0\xec\x76\x67\xce\xb9\xbb\x49\xcc\x76\x77\x92\x68\xf2\x11\x94\x03\x0e\x51\x0d\x26\xd6\x9e\x9e\x9c\x7d\xef\xc5\x14\xf4\xfd\x31\x1b\xfe\x4e\x78\xc4\xc5\x51\x84\x98\xce\xde\x21\xff\x7c\x7b\x36\xfe\x13\x00\x00\xff\xff\xb5\x61\xaf\x8f\x3e\x0b\x00\x00")

func templatesSqltypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqltypeGoTmpl,
		"templates/sqltype.go.tmpl",
	)
}

func templatesSqltypeGoTmpl() (*asset, error) {
	bytes, err := templatesSqltypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqltype.go.tmpl", size: 2878, mode: os.FileMode(420), modTime: time.Unix(1476956534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/aliastype.go.tmpl": templatesAliastypeGoTmpl,
	"templates/create-type.sql.tmpl": templatesCreateTypeSqlTmpl,
	"templates/sqltype.go.tmpl": templatesSqltypeGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"aliastype.go.tmpl": &bintree{templatesAliastypeGoTmpl, map[string]*bintree{}},
		"create-type.sql.tmpl": &bintree{templatesCreateTypeSqlTmpl, map[string]*bintree{}},
		"sqltype.go.tmpl": &bintree{templatesSqltypeGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

