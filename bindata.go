// Code generated by go-bindata.
// sources:
// templates/aliastype.go.tmpl
// templates/create-type.sql.tmpl
// templates/sqltype.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAliastypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\x3e\x5b\x4f\x31\x18\x16\xa4\x60\xec\x3d\x07\x72\xd8\x85\x5e\x4b\xa1\xa5\x97\xd2\x83\x2c\x8f\x53\x11\x5b\x4e\x47\x93\x34\x41\xe8\xdd\x8b\x2c\xa7\x34\x81\xd6\x17\x8f\x34\xdf\x7c\x3f\xa3\xa6\x81\x2d\x3a\x24\xcd\xd8\x81\x99\x3a\x14\x7b\x6d\x76\x7a\x8b\x10\x42\xfd\x90\xcb\x7b\x3d\x62\x8c\x42\xd8\x71\x3f\x11\x83\x14\x45\xd9\x69\xd6\xad\xf6\xd8\xf8\xf7\xa1\xe9\xc8\x1e\x91\x4a\x51\x94\x9e\xc9\x4c\xee\x98\xca\x7e\xe4\x52\x28\x21\xfa\x83\x33\x20\x4f\xb0\x0a\xa1\xfe\x37\x58\xed\x33\x9b\x82\x47\xa3\x9d\xf4\x64\xc0\x3a\x46\xea\xb5\xc1\x10\x15\x20\xd1\x44\x10\x44\xe1\x3f\x2c\x9b\x37\x48\x80\xf5\x26\xfd\x6a\xc9\xe7\x3d\xaa\xd4\x33\xda\x23\xbc\xbc\xb6\x67\xc6\xb5\x28\x0a\x42\x3e\x90\x83\x53\xed\x8d\x76\xff\xcf\x8c\x3e\xf1\xaa\x05\xe7\x99\xac\xdb\xfe\x80\xcb\x24\x33\x5c\x89\x22\x84\x3a\xb9\x72\x48\x31\x8a\x22\x8a\xcb\x44\x3f\x72\x7d\x97\x8c\xf5\xb2\x4c\xfd\x89\x21\xc5\x44\x62\xf8\xf3\x04\x3c\xc1\x75\xb6\xb2\x82\x59\x3f\xfe\x92\xfe\xca\xea\x92\x65\x49\x1f\x04\xa4\x6f\x31\x33\x83\x62\xcc\x77\xab\x13\x6c\x6e\xc4\xa4\x55\xb9\xb7\x78\x75\x76\xf8\x2e\x7c\xab\xfb\xac\x87\x03\x4a\x05\x32\x3f\x5a\x3d\x9f\xab\x2c\x9c\x76\x3b\x53\xb5\x69\xe5\xa3\xde\xe1\xb2\x9f\xea\xaf\xfa\xf2\x34\x0f\xd0\xc5\xd0\x22\xda\x56\x59\xf7\x33\x00\x00\xff\xff\x61\x2f\x3f\xe1\x4e\x02\x00\x00")

func templatesAliastypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAliastypeGoTmpl,
		"templates/aliastype.go.tmpl",
	)
}

func templatesAliastypeGoTmpl() (*asset, error) {
	bytes, err := templatesAliastypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/aliastype.go.tmpl", size: 590, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateTypeSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x0a\xc2\x50\x10\x44\x6b\x73\x8a\x29\x52\x28\x84\x1c\x40\xb1\xb5\x12\x41\xf4\x02\x1f\xff\x44\x3e\xe8\x12\x92\x14\x86\x65\xee\x2e\x0b\x1f\xd2\xed\x0e\x6f\xde\xbc\x26\xa6\x85\x58\xd6\x91\x70\xef\x1f\xf7\xeb\x73\x1d\x79\x4b\x5f\x4a\x48\x33\xf6\x70\xc7\x94\xec\x4d\xb4\xc5\x32\x7f\x1d\xda\xa1\xf0\x93\x71\x3c\xa3\xbf\xc4\x35\x4b\x0d\x80\x00\xcb\x50\x29\x48\x9d\x3b\x2d\x4b\x91\x87\x37\x9c\x90\x76\xf5\x8d\x99\xad\x48\xcb\x90\x9a\xc3\xe9\x1f\x00\x00\xff\xff\x47\x62\x8b\xd8\x90\x00\x00\x00")

func templatesCreateTypeSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTypeSqlTmpl,
		"templates/create-type.sql.tmpl",
	)
}

func templatesCreateTypeSqlTmpl() (*asset, error) {
	bytes, err := templatesCreateTypeSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-type.sql.tmpl", size: 144, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqltypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xc1\x6e\xe3\x36\x10\x3d\x8b\x5f\x31\x11\x36\xb0\x94\x28\x72\xd2\xde\x92\xba\xc0\x16\x68\x4f\x45\xd0\xa2\x41\x2f\x6e\x0e\x94\x34\x72\x88\x48\xa4\x42\xd2\x8e\x0d\x2d\xff\xbd\x18\x52\xb6\x65\xc7\xe9\x66\xdb\x43\x7d\x90\x25\x72\xe6\x71\xde\x70\xde\x90\xd3\x29\x2c\x50\xa2\xe6\x16\x2b\x28\x55\x85\xac\xe3\xe5\x33\x5f\x20\xf4\x7d\xfe\x5b\x78\xbd\xe7\x2d\x3a\xc7\x98\x68\x3b\xa5\x2d\x24\x2c\x8a\x2b\x6e\x79\xc1\x0d\x4e\xcd\x4b\x13\x1f\x7d\x4f\x2b\x2d\x56\xa8\x69\xd8\x58\x5d\x2a\xb9\xa2\xd7\xba\xb5\x31\x63\x51\xbc\x10\xf6\x69\x59\xe4\xa5\x6a\xa7\xaa\xb3\x42\x75\x7c\x33\xdd\x46\x70\x55\xaa\xb6\x53\x46\x58\xbc\xb2\x9b\x0e\xcd\x14\x65\xa9\x2a\x21\x17\x31\x4b\x19\xeb\x7b\x10\x35\xe4\x9f\xb5\xe6\x1b\x70\x8e\x91\x09\x45\xf9\xb0\xe9\x86\x10\xc3\xd4\xfc\xf1\x60\x90\xb1\xe9\x14\xfe\xe4\xcd\x12\x41\xb4\x5d\x83\x2d\x4a\x6b\xc0\x3e\x21\x84\x38\x73\x3f\xa7\x41\x48\x8b\xba\xe6\x25\xe6\xac\x5e\xca\x12\x92\xf5\x09\xf0\x34\x20\x25\x29\x24\x63\xef\x0c\x50\x6b\xa5\x53\xe8\x59\x24\x6a\x58\xc3\x6c\x06\x52\x34\xf4\x19\x69\xb4\x4b\x2d\xe9\x33\xa3\x07\x8b\x1c\xf3\x46\x12\x6e\x67\xd0\xa0\x4c\xd6\xe9\x1d\x48\xf8\x11\xae\xbd\xf9\x74\x0a\x0f\x4f\xa8\x11\x5e\x45\xd3\x40\x81\xc0\x2d\x34\xc8\x8d\x05\xfb\xaa\xa0\x5c\xea\x66\x03\x85\xe6\xe5\x33\x5a\x93\xc1\x77\x17\xf7\x50\x6c\x2c\x1a\x50\x35\xbc\x2c\x95\x45\x93\x05\x10\x2e\x2b\xb8\xbf\xba\xd9\xcf\x56\xd8\x88\x56\x58\xd4\x26\x67\x51\x54\xd0\xea\x2d\x7f\xc6\x64\xfe\x48\x26\x19\xdc\x64\x70\x73\xf9\xfd\x85\x4c\x69\x76\x7e\xfd\x08\x33\x98\xf4\x13\xc6\xa2\x68\xc5\x9b\x6b\xcf\x90\x7c\xd6\xf3\xeb\xc7\x7c\x48\x02\x8b\x88\x08\x4d\x9c\xed\xf9\x1e\x10\x46\xad\x59\x14\xb9\x00\x92\x81\x7a\x26\x08\xc2\xcb\x87\x75\x07\x8c\x33\xf5\xfc\xd6\xb9\x6e\x6d\xfe\x33\xe5\xb5\x4e\xe2\xa5\xc4\x75\x87\x25\x55\xe9\x8a\x16\x8f\xd3\x01\xb7\x80\x19\x6c\xcb\x24\xff\xdc\x75\x28\x2b\xbf\x53\xbf\x53\x32\xaa\x9f\x88\x7d\x52\x64\xe4\x44\x1e\xb5\xd2\x20\x28\x86\x9b\x3b\x10\xf0\x03\xc8\x3b\x10\x97\x97\x61\xe9\x15\x6f\xc4\x88\xa6\x18\xd3\x3c\xc5\xf3\x04\x51\x1f\xd1\x11\x55\x31\xa6\x7a\xc0\xf5\xdb\xc8\x06\x6c\xa2\xcb\x3d\x4b\x62\x35\xc9\x26\xe9\x76\xf4\xe3\x49\xa0\x02\xdc\xae\x6d\xac\x16\x72\x91\x8c\x20\xdd\x24\x4d\x47\x95\x3a\xd8\xc5\xbd\x8b\xc3\x68\x10\xd4\x1f\x25\x97\xc7\x7a\x32\x2f\x4d\x4e\xe3\xf2\xb4\x9a\x2e\x4e\xc9\x89\xec\x13\xa3\xcb\xbd\x43\xef\xd2\xa0\x26\xe8\x19\xd0\x8f\x72\x46\x16\x7b\x4d\x41\xf8\xed\xd3\x47\xa1\x46\xe6\x55\xd8\xf2\xc9\x9b\xde\xce\xe8\x2f\x4f\xa8\x45\x78\x51\x96\xdc\x20\x84\x6d\xb8\xdd\x93\x5f\xe7\xa6\xe4\x32\xa4\xc7\xe8\x32\x1d\xec\x42\x4e\xde\xb1\x0b\x20\xde\x3c\x3d\xc8\xd0\x78\x03\xbb\x97\x5b\xa0\x44\x28\x0b\xd4\xff\x50\x5b\x38\x7f\x00\xab\x4e\x74\x94\xbf\xe4\xb9\x89\x33\x0a\xd7\x3f\x52\xca\xef\x3f\x66\xec\x20\xe4\x81\xd3\x3e\x63\x11\x36\xd8\x9a\x5d\x19\xef\x8a\x82\xf2\xfc\xab\x90\xc8\xb5\x87\x49\xfc\x7a\xc1\xb9\x9f\x64\x13\x97\x41\x7c\xb0\x18\x95\xdc\xdb\x9a\x1f\xa8\xfa\x62\x77\xde\x80\x1a\x98\x5f\x32\xa5\xfd\x09\x2d\xec\x62\x0d\x33\x48\x2e\xd6\xe9\xfc\xf6\xfa\x91\x45\x0e\xb0\x31\xe8\x67\xf6\x5d\xe7\x2d\xb3\x6c\x84\xb5\x93\x6a\x06\x2b\x72\xd1\x5c\x2e\x10\xfc\x5c\x90\x8e\xb2\x4f\xe8\x09\x1e\xe0\xf4\x5e\x22\x03\x75\x6f\xe2\x79\x27\xab\xaf\x49\x78\xac\x5e\x51\x43\x31\x17\xd4\xfe\x3c\xc2\x1d\xac\xc6\xdd\x3c\x7a\x6f\xbb\x3b\xae\x8d\x90\x0b\xe0\xfe\x0c\xc2\xa0\x0b\x10\xb2\xc2\x35\x9c\x57\x6f\xca\x81\xf0\xac\x1a\x4a\x2d\xce\x40\xec\x24\xee\xb6\x19\x2c\x7c\x8e\x47\x45\xee\xe8\x08\x44\x59\xb9\x77\x4b\xe4\x3f\xe8\x69\xbf\x0e\xfc\x8f\x6a\x3a\x95\xdd\xaf\x0b\xe9\xe3\x1a\xfa\xd7\xf2\xe9\x1a\x61\xc7\xd4\xbe\x51\x1b\x67\xbe\x52\x7f\x11\xd8\x54\xe6\x4b\x83\xd2\xb9\xb1\xcf\x98\xed\xae\xf3\x9f\x57\xdb\x2a\x32\xb0\x50\x16\xce\xab\x38\x3b\x06\x39\xd2\x8c\x63\x51\xdf\x0f\x62\xf9\xe4\x4b\x2f\x83\x4f\x35\xd9\x13\x99\xc1\xd3\x05\xab\x30\x0f\x5f\x06\x83\x5d\xe3\x1e\xa6\x51\x56\xfe\xf5\xa0\xfc\x4e\x5f\x8c\x3e\x70\x27\x3a\x71\xdb\x48\xd9\xee\x96\x91\x4c\x3e\x12\xf7\x10\x99\xa8\x07\x13\xe7\xde\x9e\x85\x7d\x1f\xe4\x11\xf5\xfd\x31\xbf\x70\xcb\x3b\x62\x77\x84\x90\xd2\x69\x3a\x30\x2e\xb6\xa7\xdd\xdf\x01\x00\x00\xff\xff\x5e\xcf\x07\x25\x22\x0b\x00\x00")

func templatesSqltypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqltypeGoTmpl,
		"templates/sqltype.go.tmpl",
	)
}

func templatesSqltypeGoTmpl() (*asset, error) {
	bytes, err := templatesSqltypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqltype.go.tmpl", size: 2850, mode: os.FileMode(420), modTime: time.Unix(1476858900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/aliastype.go.tmpl": templatesAliastypeGoTmpl,
	"templates/create-type.sql.tmpl": templatesCreateTypeSqlTmpl,
	"templates/sqltype.go.tmpl": templatesSqltypeGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"aliastype.go.tmpl": &bintree{templatesAliastypeGoTmpl, map[string]*bintree{}},
		"create-type.sql.tmpl": &bintree{templatesCreateTypeSqlTmpl, map[string]*bintree{}},
		"sqltype.go.tmpl": &bintree{templatesSqltypeGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

