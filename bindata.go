// Code generated by go-bindata.
// sources:
// templates/aliastype.go.tmpl
// templates/create-type.sql.tmpl
// templates/sqltype.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAliastypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\x3e\x5b\x4f\x31\x18\x16\xa4\x60\xec\x3d\x07\x72\xd8\x85\x5e\x4b\xa1\xa5\x97\xd2\x83\x2c\x8f\x53\x11\x5b\x4e\x47\x93\x34\x41\xe8\xdd\x8b\x2c\xa7\x34\x81\xd6\x17\x8f\x34\xdf\x7c\x3f\xa3\xa6\x81\x2d\x3a\x24\xcd\xd8\x81\x99\x3a\x14\x7b\x6d\x76\x7a\x8b\x10\x42\xfd\x90\xcb\x7b\x3d\x62\x8c\x42\xd8\x71\x3f\x11\x83\x14\x45\xd9\x69\xd6\xad\xf6\xd8\xf8\xf7\xa1\xe9\xc8\x1e\x91\x4a\x51\x94\x9e\xc9\x4c\xee\x98\xca\x7e\xe4\x52\x28\x21\xfa\x83\x33\x20\x4f\xb0\x0a\xa1\xfe\x37\x58\xed\x33\x9b\x82\x47\xa3\x9d\xf4\x64\xc0\x3a\x46\xea\xb5\xc1\x10\x15\x20\xd1\x44\x10\x44\xe1\x3f\x2c\x9b\x37\x48\x80\xf5\x26\xfd\x6a\xc9\xe7\x3d\xaa\xd4\x33\xda\x23\xbc\xbc\xb6\x67\xc6\xb5\x28\x0a\x42\x3e\x90\x83\x53\xed\x8d\x76\xff\xcf\x8c\x3e\xf1\xaa\x05\xe7\x99\xac\xdb\xfe\x80\xcb\x24\x33\x5c\x89\x22\x84\x3a\xb9\x72\x48\x31\x8a\x22\x8a\xcb\x44\x3f\x72\x7d\x97\x8c\xf5\xb2\x4c\xfd\x89\x21\xc5\x44\x62\xf8\xf3\x04\x3c\xc1\x75\xb6\xb2\x82\x59\x3f\xfe\x92\xfe\xca\xea\x92\x65\x49\x1f\x04\xa4\x6f\x31\x33\x83\x62\xcc\x77\xab\x13\x6c\x6e\xc4\xa4\x55\xb9\xb7\x78\x75\x76\xf8\x2e\x7c\xab\xfb\xac\x87\x03\x4a\x05\x32\x3f\x5a\x3d\x9f\xab\x2c\x9c\x76\x3b\x53\xb5\x69\xe5\xa3\xde\xe1\xb2\x9f\xea\xaf\xfa\xf2\x34\x0f\xd0\xc5\xd0\x22\xda\x56\x59\xf7\x33\x00\x00\xff\xff\x61\x2f\x3f\xe1\x4e\x02\x00\x00")

func templatesAliastypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAliastypeGoTmpl,
		"templates/aliastype.go.tmpl",
	)
}

func templatesAliastypeGoTmpl() (*asset, error) {
	bytes, err := templatesAliastypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/aliastype.go.tmpl", size: 590, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateTypeSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x0a\xc2\x50\x10\x44\x6b\x73\x8a\x29\x52\x28\x84\x1c\x40\xb1\xb5\x12\x41\xf4\x02\x1f\xff\x44\x3e\xe8\x12\x92\x14\x86\x65\xee\x2e\x0b\x1f\xd2\xed\x0e\x6f\xde\xbc\x26\xa6\x85\x58\xd6\x91\x70\xef\x1f\xf7\xeb\x73\x1d\x79\x4b\x5f\x4a\x48\x33\xf6\x70\xc7\x94\xec\x4d\xb4\xc5\x32\x7f\x1d\xda\xa1\xf0\x93\x71\x3c\xa3\xbf\xc4\x35\x4b\x0d\x80\x00\xcb\x50\x29\x48\x9d\x3b\x2d\x4b\x91\x87\x37\x9c\x90\x76\xf5\x8d\x99\xad\x48\xcb\x90\x9a\xc3\xe9\x1f\x00\x00\xff\xff\x47\x62\x8b\xd8\x90\x00\x00\x00")

func templatesCreateTypeSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTypeSqlTmpl,
		"templates/create-type.sql.tmpl",
	)
}

func templatesCreateTypeSqlTmpl() (*asset, error) {
	bytes, err := templatesCreateTypeSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-type.sql.tmpl", size: 144, mode: os.FileMode(420), modTime: time.Unix(1476857686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqltypeGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4f\x6f\xe3\xb6\x13\x3d\x8b\x9f\x62\x22\x6c\x60\x29\xd1\x4f\x4a\x7e\xbd\x25\x75\x81\x2d\xd0\x9e\x8a\xa0\x45\x83\x5e\xdc\x1c\x28\x69\x64\x13\x96\x28\x85\xa4\x1d\x1b\x5a\x7e\xf7\x62\x48\xd9\x96\xff\xa4\x9b\x6d\x0f\xf5\x41\x96\xc8\x99\xc7\x79\xc3\x79\x43\x66\x19\xcc\x51\xa2\xe2\x06\x4b\x28\xda\x12\x59\xc7\x8b\x25\x9f\x23\xf4\x7d\xfa\xab\x7f\x7d\xe2\x0d\x5a\xcb\x98\x68\xba\x56\x19\x88\x58\x10\x96\xdc\xf0\x9c\x6b\xcc\xf4\x6b\x1d\x9e\x7c\x67\xa5\x12\x6b\x54\x34\xac\x8d\x2a\x5a\xb9\xa6\xd7\xaa\x31\x21\x63\x41\x38\x17\x66\xb1\xca\xd3\xa2\x6d\xb2\xb6\x33\xa2\xed\xf8\x96\x9c\xe6\x28\x33\x94\x45\x5b\x0a\x39\x0f\x59\xcc\x58\xdf\x83\xa8\x20\xfd\xac\x14\xdf\x82\xb5\xcc\x6c\x3b\x17\xd3\xf3\xb6\x1b\x02\xf2\x53\xb3\x97\xa3\x41\xc6\xb2\x0c\xfe\xe0\xf5\x0a\x41\x34\x5d\x8d\x0d\x4a\xa3\xc1\x2c\x10\x7c\x54\xa9\x9b\x53\x20\xa4\x41\x55\xf1\x02\x53\x56\xad\x64\x01\xd1\xe6\x02\x78\xec\x91\xa2\x18\xa2\xb1\x77\x02\xa8\x54\xab\x62\xe8\x59\x20\x2a\xd8\xc0\x74\x0a\x52\xd4\xf4\x19\x28\x34\x2b\x25\xe9\x33\xa1\x07\x0b\x2c\x73\x46\x12\x1e\xa6\x50\xa3\x8c\x36\xf1\x23\x48\xf8\x01\xee\x9c\x79\x96\xc1\xf3\x02\x15\xc2\x9b\xa8\x6b\xc8\x11\xb8\x81\x1a\xb9\x36\x60\xde\x5a\x28\x56\xaa\xde\x42\xae\x78\xb1\x44\xa3\x13\xf8\xff\xcd\x13\xe4\x5b\x83\x1a\xda\x0a\x5e\x57\xad\x41\x9d\x78\x10\x2e\x4b\x78\xfa\xdf\xfd\x61\xb6\xc4\x5a\x34\xc2\xa0\xd2\x29\x0b\x82\x9c\x56\x6f\xf8\x12\xa3\xd9\x0b\x99\x24\x70\x9f\xc0\xfd\xed\x77\x37\x32\xa6\xd9\xd9\xdd\x0b\x4c\x61\xd2\x4f\x18\x0b\x82\x35\xaf\xef\x1c\x43\xf2\xd9\xcc\xee\x5e\xd2\x21\x09\x2c\x20\x22\x34\x71\x75\xe0\x7b\x44\x18\x95\x62\x41\x60\x3d\x48\x02\xed\x92\x20\x08\x2f\x1d\xd6\x1d\x30\xae\xda\xe5\xb9\x73\xd5\x98\xf4\x27\xca\x6b\x15\x85\x2b\x89\x9b\x0e\x0b\xaa\xc9\x35\x2d\x1e\xc6\x03\x6e\x0e\x53\xd8\x95\x49\xfa\xb9\xeb\x50\x96\x6e\xa7\x7e\xa3\x64\x94\x3f\x12\xfb\x28\x4f\xc8\x89\x3c\xaa\x56\x81\xa0\x18\xee\x1f\x41\xc0\xf7\x20\x1f\x41\xdc\xde\xfa\xa5\xd7\xbc\x16\x23\x9a\x62\x4c\xf3\x12\xcf\x0b\x44\x5d\x44\x27\x54\xc5\x98\xea\x11\xd7\x6f\x23\xeb\xb1\x89\x2e\x77\x2c\x89\xd5\x24\x99\xc4\xbb\xd1\x8f\x27\x81\x0a\x70\xb7\xb6\x36\x4a\xc8\x79\x34\x82\xb4\x93\x38\x1e\x55\xea\x60\x17\xf6\x36\xf4\xa3\x5e\x50\xbf\x17\x5c\x9e\xea\x49\xbf\xd6\x29\x8d\xcb\xcb\x6a\xba\xb9\x24\x27\xb2\x8f\xb4\x2a\x0e\x0e\xbd\x8d\xbd\x9a\xa0\x67\x40\x3f\xca\x19\x59\x1c\x34\x05\xfe\x77\x48\x1f\x85\x1a\xe8\x37\x61\x8a\x85\x33\x7d\x98\xd2\x5f\x1a\x51\x8b\x70\xa2\x2c\xb8\x46\xf0\xdb\xf0\x70\x20\xbf\x49\x75\xc1\xa5\x4f\x8f\x56\x45\x3c\xd8\xf9\x9c\xbc\x63\xe7\x41\x9c\x79\x7c\x94\xa1\xf1\x06\x76\xaf\x0f\x40\x89\x68\x0d\x50\xb7\x43\x65\xe0\xfa\x19\x4c\x7b\xa1\xa3\xfc\x29\xaf\x75\x98\x50\xb8\xee\x11\x53\x7e\xff\x36\x63\x47\x21\x0f\x9c\x0e\x19\x0b\xb0\xc6\x46\xef\xcb\x78\x5f\x14\x94\xe7\x5f\x84\x44\xae\x1c\x4c\xe4\xd6\xf3\xce\xfd\x24\x99\xd8\x04\xc2\xa3\xc5\xa8\xe4\xce\x6b\x7e\xa0\xea\x8a\xdd\x3a\x03\x6a\x60\x6e\xc9\x98\xf6\xc7\xb7\xb0\x9b\x0d\x4c\x21\xba\xd9\xc4\xb3\x87\xbb\x17\x16\x58\xc0\x5a\xa3\x9b\x39\x74\x9d\x73\x66\xc9\x08\x6b\x2f\xd5\x04\xd6\xe4\xa2\xb8\x9c\x23\xb8\x39\x2f\x9d\xd6\x2c\xd0\x11\x3c\xc2\xe9\x9d\x44\x06\xea\xce\xc4\xf1\x8e\xd6\x5f\x93\xf0\x58\xbd\xa2\x82\x7c\x26\xa8\xfd\x39\x84\x47\x58\x8f\xbb\x79\xf0\xde\x76\x77\x5c\x69\x21\xe7\xc0\xdd\x19\x84\x5e\x17\x20\x64\x89\x1b\xb8\x2e\xcf\xca\x81\xf0\x4c\x3b\x94\x5a\x98\x80\xd8\x4b\xdc\xee\x32\x98\xbb\x1c\x8f\x8a\xdc\xd2\x11\x88\xb2\xb4\xef\x96\xc8\xbf\xd0\xd3\x61\x1d\xf8\x0f\xd5\x74\x29\xbb\x5f\x17\xd2\xc7\x35\xf4\x8f\xe5\xd3\xd5\xc2\x8c\xa9\x7d\xa3\x36\xae\x5c\xa5\xfe\x2c\xb0\x2e\xf5\x97\x1a\xa5\xb5\x63\x9f\x31\xdb\x7d\xe7\xbf\x2e\x77\x55\xa4\x61\xde\x1a\xb8\x2e\xc3\xe4\x14\xe4\x44\x33\x96\x05\x7d\x3f\x88\xe5\x93\x2b\xbd\x04\x3e\x55\x64\x4f\x64\x06\x4f\xeb\xad\xfc\x3c\x7c\x19\x0c\xf6\x8d\x7b\x98\x46\x59\xba\xd7\xa3\xf2\xbb\x7c\x31\xfa\xc0\x9d\xe8\xc2\x6d\x23\x66\xfb\x5b\x46\x34\xf9\x48\xdc\x43\x64\xa2\x1a\x4c\xac\x3d\x3f\x0b\xfb\xde\xcb\x23\xe8\xfb\x53\x7e\xfe\x96\x77\xc2\xee\x04\x21\xa6\xd3\x74\x60\x9c\xef\x4e\xbb\xbf\x02\x00\x00\xff\xff\xb3\xab\x3f\x7b\x10\x0b\x00\x00")

func templatesSqltypeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqltypeGoTmpl,
		"templates/sqltype.go.tmpl",
	)
}

func templatesSqltypeGoTmpl() (*asset, error) {
	bytes, err := templatesSqltypeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqltype.go.tmpl", size: 2832, mode: os.FileMode(420), modTime: time.Unix(1476874095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/aliastype.go.tmpl": templatesAliastypeGoTmpl,
	"templates/create-type.sql.tmpl": templatesCreateTypeSqlTmpl,
	"templates/sqltype.go.tmpl": templatesSqltypeGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"aliastype.go.tmpl": &bintree{templatesAliastypeGoTmpl, map[string]*bintree{}},
		"create-type.sql.tmpl": &bintree{templatesCreateTypeSqlTmpl, map[string]*bintree{}},
		"sqltype.go.tmpl": &bintree{templatesSqltypeGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

